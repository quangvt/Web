================================================================================
01. Course Overview
02. An Introduction to the Microsoft Web Platform
03. Understanding How Web Forms Work
04. Understanding How Web Pages Work
05. Understanding How MVC Work
06. Understanding ASP.NET Core Work
07. Strategic Comparison

================================================================================
02. An Introduction to the Microsoft Web Platform
  Layer 1: Frameworks:  ASP.NET/ASP.NET Core;
  Layer 2: Services:    Web API/SignalR
  Layer 3: Sites:       WebForms/WebPages/MVC

1. Tools
- Visual Studio 2015: Platform Windows, support ASP.NET/ASP.NET Core
- Visual Studio Code: Platform Windows/macOS/Linux, supprot ASP.NET Core
2. Web Technologies Overview
- How the Web Works
+ http/async HTTP
3. Sizing the developer environment
- Solution vs .Folder
- Rich UI vs. lightweight text-intensive

================================================================================
03. Understanding How Web Forms Work

- Describing: "Classic" ASP => Rapid App Development => Windows Forms Developer
  => Web Forms Developers
Characters 
+ Object-oriented
+ Event-driven
+ Supports separation of markup from logic
+ Pre-compilation or dynamic compilation
+ Remarkable integration of Visual Studio: Design View/Controls(any manry 3rd 
party/Data binding
+ Maturity

- Processing: 
HTTP Pipeline
+ <send> http://site/page[.aspx] <recent support simple url>
+ HTTP Modules: Run serials of HTTP Modules, examin, round, determine how
  http request should be handle.
+ HTTP Handler: process
+ HTTP Modules: adjustment
* ASP.NET Web Forms: (www.asp.net/get-started/websites)

- Demo:
+ suffix: .aspx (About/Default)
+ Tabs: Design/Split/Source => WYSIWUG
+ Master Page: ~/Site.Master
+ Inherits: [Namespace].[Class]
+ Contents/CSS
+ Global.asax

================================================================================
04. Understanding How Web Pages Work

- Desribing: (www.asp.net/web-pages) => ASP.NET Web Pages and the new Razor 
syntax provide a fast, approachable, and lightweight way to combine server code
with HTML to create dynamic web content.
+ inline code ...
+ Blend of markup with server side code (cshtml)
+ Razor syntax
+ Dynamic compilation (not include code behind) => compiled at the first time
web pages is requested.
+ Compares closest to "APS"

- Processing: 
+ http://site/page[.cshtml]
+ HTTP Modules
+ HTTP Handler (process server code: cshtml)
+ HTTP Modules

- Demos:
+ Create: Create New Web Site (ASP.NET Web Site (Razor v3))
+ Folder Struct: About.cshtml/Default.cshtml
+ Key:
  ~ _AppStart.cshtml
  ~ Layout = "~/_SiteLayout.cshtml";

================================================================================
05. Understanding How MVC Work

- Describing: www.asp.net/mvc
+ ASP.NET MVC gives you a powerful, patterns-based way to build dynamic 
websites that enables a clean separation of concerns and that gives you full
control over markup for enjoyable, agile development.
+ Emphasis on "separation of concerns": Model(data)/View(user-interface)/ 
Controller(processing)
+ Mature with continued investment

- Processing: 
+ HTTP Request: http://site/ => {default controler} / {default action}
+ HTTP Pipeline:
+ HTTP Modules/Handler/Modules

- Demo:
+ Create web site
+ Post data
+ Consume and display a list of data

================================================================================
06. Understanding How ASP.NET Core Work

- Describing: www.asp.net/vnext
ASP.NET Core is a lean framework for building web and cloud applications.
ASP.NET Core is fully open source and available on GitHub
+ .NET Core 1.0 (lightweight)
+ Cross-platform development
+ Host on IIS or own process
+ Open-source and community focused
+ Newer with strong investment

- Processing
+ HTTP Request: http://site/page
+ Startup.cs

- Demo
+ project.json (ref, depend, ...)
+ Startup.cs
+ view: <form asp-contrroller="Account" asp-action...=> new in MVC (purple 
color)

================================================================================
07. Strategic Comparison

- ASP.NET vs. ASP.NET Core
  Require Windows         | Cross-platform
  Web Forms/Web Pages/MVC | Web Pages, MVC
  .NET Framework          | .NET COre & .NET Framework (target full framework 
                          |    on Windows)
                          | Unified syntax and controllers
                          | Dependency injection

- Web Forms
Strengths vs. Challenges
  Established maturity          | "Bloated": Object model and events/Viewstate
  Rapid application development | Not support in ASP.NET Core
  Strong 3rd party support

- MVC
Strengths vs. Challenges
 Emphasis on 'separation of concerns' | Stronger developer skills needed
 Supported in ASP.NET Core
 Strong adoption

- MVC
Strengths vs. Challenges
  Serer code embedded in HTML | Server code embedded in HTML
  Dynamic compilation         | Smaller adoption
  Supported in ASP.NET Core

-- THE END --
Thanks for reading
