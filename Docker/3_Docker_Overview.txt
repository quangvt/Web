1. Docker Overview
Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastruce so you can deliver software quickly. With Docker, you can manage your infrastructe in the same ways you manage your applications. By taking advantage of Docker's methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.

a. The Docker platform
Docker provides the ability to package and run an application in a loosely isolated environment called a container. The isolation and security allow you to run many containers simulateously on a given host. Containers are lightweight because they don't need the extra load of a hypervisor, but run directly within the host machine's kernel. This mean you can run more containers on a given hardware combination than if you were using virtual machine. You can even run Docker containers within host machines that are actually virtual machines!

Docker provides tooling and a platform to manage the lifecycle of your containers:
- Develop your application and its supporting components using containers.
- The container becomes the unit for distributing and testing your application.
- When you're ready, deploy your application into your production env, as a container or an orchestrated service. This works the same whether your production env is a local data center, a cloud provider, or a hybrid of the two.

b. Docker Engine
Docker Engine is a client-server application with these major components:
- A server which is a type of long-running program called a deamon process (the dockerd command)
- A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do
- A command line interface (CLI) client (the docker command)

The CLI uses the Docker REST API to control or interact with the Docker daemon through scripting or direct CLI commands. Many othe Docker applications use the underlying API and CLI.

The deamon creates and manages Docker objects, such as images, containers, networks, and volumes.

c. What can I use Docker for
Fast, consistent delivery of your applications
- ???
Responsive deployment and scaling
- ???
Running more workloads on the same hardware
- ???

d. Docker architecture
Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface

<IMAGE>
Client
   - docker build
   - docker pull
   - docker run
Docker_host
   - Docker daemon
   - Images
   - Containers
Registry
   - Nginx(sample)
   - Ubuntu
   - ...

x. Docker daemon:
- The docker daemon(dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon also can connnect with other daemon to manage Docker services.

x. Docker client:
- The docker client (docker) is the primary way that may Docker users interact with Docker. When you use commands such as docker run, the client sends these commands to dockerd, which carries them out. The docker command uses the Docker API. The Docker client can communicate with more than one daemon.

x. Docker registries
- A Docker registry stores Docker images. Docker Hub and Docker Cloud are public registies that anyone can use, and Docker is configured to look for images on Docker Hub by default. You can even run your own private registry. If you use Docker Datacenter(DDC), it includes Docker Trusted Registry (DTR)
When you use the docker pull or docker run commands, the required imagess are pulled from your configured registry. When you use the docker push command, your image is pushed to your configured registry.
Docker Store allows you to buy and sell Docker images or distribute them for free. For instance, you can buy a Docker image containing an application or service from a software vendor and use the image to deploy the appication into your testing ,s staging, and productiono environtments. Oyou can updgrade the application pby pulling the new version of the image and redeploying the containers.

x. Docker objects
When you use Docker, you are creating and suing images, containers, networks, volumnes, plugins, and others objects. This section is a brief overview of some of those objects.
- IMAGES: 
and image is a read-only template with instructions ofr crateing a Docker conatianier. Often, an image is based on another image, with some additional customization. For example, you may build an image wihich is absed on the ubunut image, but installs the Apache web server and your application, as well as the configuration o detailes needed nto meake your application run.
Your mights creat  oyour own images or you might only use those created by the others and ppublished in a registry. To build your own image, you crate a Dockerfile with a simple syntax for defining the steps needed to create the image and rn it. Each instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are brebuilt. This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.
- CONTAINERS
A container is a runnable instance of an image. Your can create, run, stop, move, or delete a container using the Docker APOI or CLI. You can connect container to one or more networks, attach storage to it, or even create a new image based on its current state.
By default, a container is relatively ell isolated from other containers and its host machine. You can control how isolated a container's network, storage, or other underlying subsystems are from other containers or from the host machine
A container is defined by its image as well as any configuration options you provide to it when you create or run it. When a container stops, any changes to its state that are not stored in persistent storage disappears.

Example docker run command
the following command runs an ubuntu container, attaches interactily to your local command-line session, and runs /bin/bash
$docker run -i -t ubuntu /bin/bash

when you run this command, the following happens (assuming you hvae are the default registry configuration)
- Check image ubuntu on local. if not exist => auto run docker pull ubuntu
- Docker create a new container, as though you had run a docker create
- Docker allocates a read-write filesystem to the container, as its final layer. This allows a running container to create or modify files and directories in its local filesystem.
- Docker creates a network interface to connect the container to the default network, since you did not specify any networking options. This includes assigning an IP address to the container. By default, containers can connect to external networks using the host machine's network connection.
- Docker start the container and executes /bin/bash. Because the container is run interactively and attached to your terminal(due to the -i and -t)
... continues ...
