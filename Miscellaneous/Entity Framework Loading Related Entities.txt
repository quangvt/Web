https://msdn.microsoft.com/en-us/data/jj574232(v=vs.113)

Entity Framework supports three ways to load related data - eager loading, lazy loading and 
  explicit loading. The techniques shown in this topic apply equally to models created with 
  Code First and the EF Designer.

1.1. Eagerly Loading
---------------------------------------------
Eager loading is the process whereby a query for one type of entity also loads related entities 
as part of the query. Eager loading is achieved by use of the Include method. For example, 
the queries below will load blogs and all the posts related to each blog.

using (var context = new BloggingContext()) 
{ 
    // Load all blogs and related posts 
    var blogs1 = context.Blogs 
                          .Include(b => b.Posts) 
                          .ToList(); 
 
    // Load one blogs and its related posts 
    var blog1 = context.Blogs 
                        .Where(b => b.Name == "ADO.NET Blog") 
                        .Include(b => b.Posts) 
                        .FirstOrDefault(); 
 
    // Load all blogs and related posts  
    // using a string to specify the relationship 
    var blogs2 = context.Blogs 
                          .Include("Posts") 
                          .ToList(); 
 
    // Load one blog and its related posts  
    // using a string to specify the relationship 
    var blog2 = context.Blogs 
                        .Where(b => b.Name == "ADO.NET Blog") 
                        .Include("Posts") 
                        .FirstOrDefault(); 
}
Note that Include is an extension method in the System.Data.Entity namespace so make sure you are 
using that namespace.


1.2. Eagerly loading multiple levels
----------------------------------------
It is also possible to eagerly load multiple levels of related entities. The queries below show 
examples of how to do this for both collection and reference navigation properties.

using (var context = new BloggingContext()) 
{ 
    // Load all blogs, all related posts, and all related comments 
    var blogs1 = context.Blogs 
                       .Include(b => b.Posts.Select(p => p.Comments)) 
                       .ToList(); 
 
    // Load all users their related profiles, and related avatar 
    var users1 = context.Users 
                        .Include(u => u.Profile.Avatar) 
                        .ToList(); 
 
    // Load all blogs, all related posts, and all related comments  
    // using a string to specify the relationships 
    var blogs2 = context.Blogs 
                       .Include("Posts.Comments") 
                       .ToList(); 
 
    // Load all users their related profiles, and related avatar  
    // using a string to specify the relationships 
    var users2 = context.Users 
                        .Include("Profile.Avatar") 
                        .ToList(); 
}
Note that it is not currently possible to filter which related entities are loaded. 
Include will always bring in all related entities.

2. Lazy loading
----------------------------------------
Turn lazy loading off for serialization
Lazy loading and serialization don’t mix well, and if you aren’t careful you can end up querying for 
    your entire database just because lazy loading is enabled. Most serializers work by accessing 
    each property on an instance of a type. Property access triggers lazy loading, so more entities
    get serialized. On those entities properties are accessed, and even more entities are loaded.
    It’s a good practice to turn lazy loading off before you serialize an entity. The following
    sections show how to do this.

Turning off lazy loading for specific navigation properties
Lazy loading of the Posts collection can be turned off by making the Posts property non-virtual:

public class Blog 
{  
    public int BlogId { get; set; }  
    public string Name { get; set; }  
    public string Url { get; set; }  
    public string Tags { get; set; }  
 
    public ICollection<Post> Posts { get; set; }  
}
Loading of the Posts collection can still be achieved using eager loading (see Eagerly Loading above)
 or the Load method (see Explicitly Loading below).